{"name":"Fault Insertion Unit","tagline":"","body":"### Testprocess\r\nThe development process of a device or function affects significantly its quality and reliability. Beginning with an idea and specification it then goes through testing and implementation process up to the completion and the first use. Although all of these phases should be carried out carefully and with accuracy, notably the process of testing while developing gets a special importance, since it can be very costly and as a key component of the process, it provides within the framework of the implementation an evaluation of the realized system behavior. It is used to detect undesired system behavior and secures - dependent on the form of execution - either a minimum quality or a small economic risk. In addition, tests will also help improving the system performance and increase the robustness and hence the reliability, because with them in places, scenarios can be identified, which were not directly apparent in the context of the system design. But testing only with field trials is unusual cause of way too high costs and a low factor of reliability and reproducability.\r\n\r\nBasically, there are different methods of testing available. They can be divided into those which are automatable or manual. Also a differentiation which level of the development process is tested could be made: only a test of one function or a whole integration and system test. For the execution of these tests, the description of the test sequence, with the definitions of the stimuli and the expected reactions, is crucial. This is, no matter of automatized or manual testing, always affiliated to plenty of effort. And at least as much time is necessary for the illustration and reproducable reenactment afterwards.\r\n\r\nIndependent of its form, a test always consists the same elements: a unit under test ( the so-called \"Device under test\" or DUT), a description of the test sequence (of stimulus and response) and an environment where the DUT gets stimulated by the stimulus and the response can be detected, recorded and evaluated. The figure below shows this simplified.\r\n![sdfgs](https://cloud.githubusercontent.com/assets/15342917/10993700/0208e934-8471-11e5-9397-02bdb39af711.png)\r\n![dfgdsf](https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png)\r\n\r\n!!! HIER SOLLTE EIN BILD ERSCHEINEN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nThere is alwas a test catalog which brackets all the available tests for the present scenario. It contains at least those tests, where the system behavior ist tested in a general regular use case. But other than that, also those tests which take a look at irregular and error containing cases are important.\r\n\r\nOn the system level, usually the interaction of one component with the remaining components is validated. And already here a variety of effects can occur, cause components and functions of different developers and groups must work together, although they might be specificated and implemented in different approaches and concepts.\r\n\r\nEspecially in system tests the representation of irregular system behavior is a challenge, because the components (whether real or simulated) which interact with the DUT normally operate in their regular status and do not target to provide any fault neither functional nor technical errors. So these system tests can be categorized as \"good-cases\". On the other hand, those tests which also consider potential faults or other irregular conditions, are called \"bad-cases\" in the following. They definitly need more effort to accomplish but are quite relevant for security and reliability questions.\r\n\r\n!!! NAECHSTES BILD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nTo represent those \"bad-cases\", the stimulus and input of the DUT needs to be able to describe disturbed behavior, too. So in case of a system test the original signal flow needs to be modified by the rest of the test environment. The form of the modification may vary depending on which DUT you want to test and what kind of \"bad-case\" you want to look at. And this is the point, where the system can make use of the Fault Insertion Unit.\r\n\r\n!!! LETZTES WORT ALS LINK !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}